import express from 'express';
import PushSubscription from '../models/pushSubscriptionModel.js';
import auth from '../middleware/auth.js';
import webpush from 'web-push';

const router = express.Router();

// üîß Configure web-push with your VAPID keys
webpush.setVapidDetails(
  process.env.VAPID_SUBJECT,
  process.env.VAPID_PUBLIC_KEY,
  process.env.VAPID_PRIVATE_KEY
);

/* ========================================================
   üü¢ 1Ô∏è‚É£ SUBSCRIBE: Save new device subscription
======================================================== */
router.post('/subscribe', auth, async (req, res) => {
  try {
    const { subscription } = req.body;

    if (!subscription || !subscription.endpoint) {
      return res.status(400).json({ success: false, message: 'Invalid subscription data' });
    }

    // Check if this exact device is already saved
    const existing = await PushSubscription.findOne({
      userId: req.user.id,
      'subscription.endpoint': subscription.endpoint,
    });

    if (!existing) {
      await PushSubscription.create({
        userId: req.user.id,
        subscription,
      });
      console.log(`‚úÖ New subscription saved for user ${req.user.id}`);
    } else {
      console.log(`‚ÑπÔ∏è Subscription already exists for this endpoint`);
    }

    res.json({ success: true, message: 'Subscription saved successfully' });
  } catch (error) {
    console.error('‚ùå Error saving subscription:', error);
    res.status(500).json({ success: false, message: 'Error saving subscription' });
  }
});

/* ========================================================
   üü° 2Ô∏è‚É£ NOTIFY ORDER STATUS: Send to all user devices
======================================================== */
router.post('/notify-order-status', async (req, res) => {
  try {
    const { userId, orderId, status, items } = req.body;

    console.log(`üì¨ Sending notification | User: ${userId} | Status: ${status}`);

    const subscriptions = await PushSubscription.find({ userId });

    if (!subscriptions.length) {
      console.log(`‚ö†Ô∏è No subscriptions found for userId: ${userId}`);
      return res.json({ success: false, message: 'No subscription found' });
    }

    // üß© Notification text templates
    const statusConfigs = {
      'En pr√©paration': {
        title: 'üç≥ Commande en pr√©paration',
        body: 'Votre commande est en cours de pr√©paration. √Ä bient√¥t!',
        vibrate: [200, 100, 200],
      },
      'Livraison': {
        title: 'üöó Commande en livraison',
        body: 'Votre commande est en route. Elle arrive bient√¥t!',
        vibrate: [300, 100, 300],
      },
      'Livr√©e': {
        title: '‚úÖ Commande livr√©e',
        body: 'Votre commande a √©t√© livr√©e. Merci!',
        vibrate: [200, 50, 200, 50, 200],
      },
      'Cancelled': {
        title: '‚ùå Commande annul√©e',
        body: 'Votre commande a √©t√© annul√©e.',
        vibrate: [500, 100, 500],
      },
      'Payment Failed': {
        title: '‚ùå Paiement √©chou√©',
        body: 'Le paiement de votre commande a √©chou√©.',
        vibrate: [500, 100, 500],
      },
      'Refunded': {
        title: 'üí∏ Commande rembours√©e',
        body: 'Votre commande a √©t√© rembours√©e.',
        vibrate: [200, 100, 200],
      },
    };

    const config = statusConfigs[status] || {
      title: 'üì¶ Statut de commande',
      body: `Votre commande: ${status}`,
      vibrate: [200, 100, 200],
    };

    // üß† Build the notification payload
    const payload = JSON.stringify({
      title: config.title,
      body: config.body,
      icon: '/logo.png',
      badge: '/logo-small.png',
      tag: `order-${orderId}-${status}-${Date.now()}`, // unique
      requiresInteraction: true,
      vibrate: config.vibrate,
      timestamp: Date.now(),
      priority: 'high',
      actions: [
        { action: 'view-order', title: 'Voir la commande' },
        { action: 'close', title: 'Fermer' },
      ],
      data: {
        orderId,
        status,
        itemsCount: items?.length || 0,
        url: '/myorders',
      },
    });

    // üîÅ Send notification to all devices
    for (const subData of subscriptions) {
      try {
        await webpush.sendNotification(subData.subscription, payload);
        console.log(`‚úÖ Notification sent to ${subData.subscription.endpoint}`);
      } catch (err) {
        console.error(`‚ùå Failed for ${subData.subscription.endpoint}:`, err.message);
        // Remove expired subscriptions
        if (err.statusCode === 410) {
          await PushSubscription.deleteOne({ _id: subData._id });
          console.log('üóëÔ∏è Removed expired subscription');
        }
      }
    }

    res.json({ success: true, message: 'Notification sent to all devices' });
  } catch (error) {
    console.error(`‚ùå Error sending notifications:`, error.message);
    res.status(500).json({ success: false, message: 'Error sending notification', error: error.message });
  }
});

/* ========================================================
   üî¥ 3Ô∏è‚É£ UNSUBSCRIBE: Remove only the current device
======================================================== */
router.post('/unsubscribe', auth, async (req, res) => {
  try {
    const { endpoint } = req.body;

    if (!endpoint) {
      return res.status(400).json({ success: false, message: 'Endpoint is required' });
    }

    await PushSubscription.deleteOne({
      userId: req.user.id,
      'subscription.endpoint': endpoint,
    });

    res.json({ success: true, message: 'Device unsubscribed successfully' });
  } catch (error) {
    console.error('‚ùå Error unsubscribing:', error);
    res.status(500).json({ success: false, message: 'Error unsubscribing device' });
  }
});

/* ========================================================
   üß™ 4Ô∏è‚É£ TEST: Send a sample notification manually
======================================================== */
router.post('/test', async (req, res) => {
  try {
    const { subscription, userId } = req.body;

    if (!subscription) {
      return res.status(400).json({ success: false, message: 'Subscription required' });
    }

    const payload = JSON.stringify({
      title: 'üîî Test Notification',
      body: 'This is a test push notification!',
      icon: '/logo.png',
      badge: '/logo-small.png',
      tag: `test-${Date.now()}`,
      requiresInteraction: true,
      vibrate: [200, 100, 200],
      priority: 'high',
      data: { url: '/myorders' },
    });

    await webpush.sendNotification(subscription, payload);
    console.log(`‚úÖ Test notification sent to userId: ${userId}`);

    res.json({ success: true, message: 'Test notification sent!' });
  } catch (error) {
    console.error('‚ùå Error sending test notification:', error);
    res.status(500).json({ success: false, message: 'Failed to send test notification' });
  }
});

export default router;
